{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/admin/brands/manage/[products]",
      "regex": "^/admin/brands/manage/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPproducts": "nxtPproducts"
      },
      "namedRegex": "^/admin/brands/manage/(?<nxtPproducts>[^/]+?)(?:/)?$"
    },
    {
      "page": "/admin/categories/manage/[products]",
      "regex": "^/admin/categories/manage/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPproducts": "nxtPproducts"
      },
      "namedRegex": "^/admin/categories/manage/(?<nxtPproducts>[^/]+?)(?:/)?$"
    },
    {
      "page": "/admin/products/manage/[manage]",
      "regex": "^/admin/products/manage/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPmanage": "nxtPmanage"
      },
      "namedRegex": "^/admin/products/manage/(?<nxtPmanage>[^/]+?)(?:/)?$"
    },
    {
      "page": "/reset/[usertoken]",
      "regex": "^/reset/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusertoken": "nxtPusertoken"
      },
      "namedRegex": "^/reset/(?<nxtPusertoken>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/brands",
      "regex": "^/admin/brands(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/brands(?:/)?$"
    },
    {
      "page": "/admin/brands/manage",
      "regex": "^/admin/brands/manage(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/brands/manage(?:/)?$"
    },
    {
      "page": "/admin/brands/newbrand",
      "regex": "^/admin/brands/newbrand(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/brands/newbrand(?:/)?$"
    },
    {
      "page": "/admin/categories",
      "regex": "^/admin/categories(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/categories(?:/)?$"
    },
    {
      "page": "/admin/categories/manage",
      "regex": "^/admin/categories/manage(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/categories/manage(?:/)?$"
    },
    {
      "page": "/admin/categories/newcategory",
      "regex": "^/admin/categories/newcategory(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/categories/newcategory(?:/)?$"
    },
    {
      "page": "/admin/products",
      "regex": "^/admin/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products(?:/)?$"
    },
    {
      "page": "/admin/products/manage",
      "regex": "^/admin/products/manage(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products/manage(?:/)?$"
    },
    {
      "page": "/admin/products/upload",
      "regex": "^/admin/products/upload(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products/upload(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/recover",
      "regex": "^/recover(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/recover(?:/)?$"
    },
    {
      "page": "/register",
      "regex": "^/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/register(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}